-- Silent Aim Script (Modified to Shoot Closer)

local S, E = pcall(function()
    _G.Stepped:Disconnect()
    _G.InputBegan:Disconnect()
end)

if S then
    game.StarterGui:SetCore("SendNotification", {
        Title = "Silent Aim",
        Text = "Silent Aim was reset, Mode: Normal Aimbot",
        Duration = 3
    })

    _G.Stepped = nil
    _G.InputBegan = nil
end

local Player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local Playground = (game.PlaceId == 4923146720)
local IsInFooting = false

local Goals = {} do
    for _, Obj in next, game:GetDescendants() do
        if Obj.Name == "Goal" and Obj:IsA("BasePart") then
            table.insert(Goals, Obj)
        elseif Obj.Name == "Part" and Obj:IsA("BasePart") and Obj.Size == Vector3.new(5, 1, 5) then
            table.insert(Goals, Obj)
        end
    end
end

local Shuffled, Selected do
    for _, Garbage in next, getgc(true) do
        if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
            Selected = Garbage
        elseif type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
            Shuffled = Garbage
        end
    end
end

local Clicker = Playground and getupvalue(Selected, 5) or getupvalue(Selected, 3)

local GetClock = function()
    local OldClock = getupvalue(Selected, 3)
    local NewClock = OldClock + 1
    setupvalue(Selected, 3, NewClock)
    return NewClock
end

local GetKeyFromKeyTable = function()
    local Keys = getupvalue(Selected, 4)
    return Playground and "Shotta_" or type(Keys[1]) == "string" and Keys[1] or "Shotta"
end

local RemoveKeyFromKeyTable = function()
    local StartTime = tick()
    repeat task.wait() until Player.Character == nil or Player.Character:FindFirstChild("Basketball") == nil or StartTime - tick() > 1.5
    if Player.Character and tick() - StartTime <= 1.5 then
        local Keys = getupvalue(Selected, 4)
        if type(Keys) == "table" then
            table.remove(Keys, 1)
            setupvalue(Selected, 4, Keys)
        end
    end
end

local GetRandomizedTable = function(TorsoPosition, ShootPosition)
    local UnrandomizedArgs = {
        X1 = TorsoPosition.X,
        Y1 = TorsoPosition.Y,
        Z1 = TorsoPosition.Z,
        X2 = ShootPosition.X,
        Y2 = ShootPosition.Y,
        Z2 = ShootPosition.Z
    }
    return {
        UnrandomizedArgs[Shuffled["1"]],
        UnrandomizedArgs[Shuffled["2"]],
        UnrandomizedArgs[Shuffled["3"]],
        UnrandomizedArgs[Shuffled["4"]],
        UnrandomizedArgs[Shuffled["5"]],
        UnrandomizedArgs[Shuffled["6"]],
    }
end

local GetGoal = function()
    local Distance, Goal = 9e9
    for _, Obj in next, Goals do
        local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
        if Distance > Magnitude then
            Distance = Magnitude
            Goal = Obj
        end
    end
    return Goal
end

local GetDistance = function()
    return (Player.Character.Torso.Position - GetGoal().Position).Magnitude
end

local GetDirection = function(Position)
    return (Position - Player.Character.Torso.Position).Unit
end

local GetMoveDirection = function()
    local Direction = Player.Character.Humanoid.MoveDirection * 1.8
    if UIS:IsKeyDown(Enum.KeyCode.S) and UIS:IsKeyDown(Enum.KeyCode.W) then
        Direction = Player.Character.Humanoid.MoveDirection * 0.5
    elseif UIS:IsKeyDown(Enum.KeyCode.S) then
        Direction = Player.Character.Humanoid.MoveDirection * 0.8
    elseif UIS:IsKeyDown(Enum.KeyCode.W) then
        Direction = Player.Character.Humanoid.MoveDirection * 1.2
    end
    return Direction
end

local GetBasketball = function()
    return Player.Character:FindFirstChildOfClass("Folder")
end

local InFootingCheck = function()
    local Distance = GetDistance()
    local Basketball = GetBasketball()
    local Power = Basketball and Basketball.PowerValue.Value or 0
    if not Basketball then IsInFooting = false return end
    if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
        Distance = Distance - (Power == 75 or Power == 100 and 1 or 3)
    end
    if Power == 75 then IsInFooting = (Distance > 50 and Distance < 58)
    elseif Power == 80 then IsInFooting = (Distance > 50 and Distance < 61)
    elseif Power == 85 then IsInFooting = (Distance > 50 and Distance < 66)
    elseif Power == 90 then IsInFooting = (Distance > 50 and Distance < 70)
    elseif Power == 95 then IsInFooting = (Distance > 50 and Distance < 78)
    elseif Power == 100 then IsInFooting = (Distance > 50 and Distance < 83)
    else IsInFooting = false end
end

local GetArc = function()
    local Distance = GetDistance()
    local Basketball = GetBasketball()
    local Power = Basketball and Basketball.PowerValue.Value or 0
    local Arc = nil
    if Power == 75 then
        if Distance > 50 and Distance < 52 then Arc = 60
        elseif Distance < 54 then Arc = 55
        elseif Distance < 56 then Arc = 50
        elseif Distance < 58 then Arc = 45 end
    elseif Power == 80 then
        if Distance > 50 and Distance < 54 then Arc = 75
        elseif Distance < 58 then Arc = 70
        elseif Distance < 61 then Arc = 65 end
    elseif Power == 85 then
        if Distance > 50 and Distance < 54 then Arc = 85
        elseif Distance < 60 then Arc = 80
        elseif Distance < 66 then Arc = 75 end
    elseif Power == 90 then
        if Distance > 50 and Distance < 56 then Arc = 100
        elseif Distance < 62 then Arc = 95
        elseif Distance < 68 then Arc = 90 end
    elseif Power == 95 then
        if Distance > 50 and Distance < 60 then Arc = 115
        elseif Distance < 68 then Arc = 110
        elseif Distance < 74 then Arc = 100 end
    elseif Power == 100 then
        if Distance > 50 and Distance < 62 then Arc = 125
        elseif Distance < 70 then Arc = 120
        elseif Distance < 78 then Arc = 110
        elseif Distance < 83 then Arc = 100 end
    end
    if Playground and Arc then Arc = Arc - 5 end
    return Arc
end

getgenv().Shoot = function()
    local Goal = GetGoal()
    local Arc = GetArc()
    local MoveDirection = GetMoveDirection()
    local Hit = Goal.Position + Vector3.new(0, Arc, 0) + MoveDirection
    local Direction = GetDirection(Hit)
    local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Direction)
    local Basketball = GetBasketball()
    local Key = GetKeyFromKeyTable()
    if Playground then Key = Key .. GetClock() end
    Clicker:FireServer(Basketball, Basketball.PowerValue.Value, RandomizedArgs, Key)
    if GetBasketball() then RemoveKeyFromKeyTable() end
end

_G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
    if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
        if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
            Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait(0.25)
        end
        Shoot()
    end
end)

_G.Stepped = RS.Stepped:Connect(function()
    InFootingCheck()
end)
