local S, E = pcall(function()
    _G.Stepped:Disconnect()
    _G.InputBegan:Disconnect()
end)

if S then
    game.StarterGui:SetCore("SendNotification", {
        Title = "Silent Aim",
        Text = "Silent Aim was reset, Mode: NoJumpBot (Close Range)",
        Duration = 3
    })

    _G.Stepped = nil
    _G.InputBegan = nil
end

local Player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local Playground = (game.PlaceId == 4923146720)
local IsInFooting = false

local Goals = {} do
    for _, Obj in next, game:GetDescendants() do
        if Obj.Name == "Goal" and Obj:IsA("BasePart") then
            table.insert(Goals, Obj)
        elseif Obj.Name == "Part" and Obj:IsA("BasePart") and Obj.Size == Vector3.new(5, 1, 5) then
            table.insert(Goals, Obj)
        end
    end
end

local Shuffled, Selected do
    for _, Garbage in next, getgc(true) do
        if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
            Selected = Garbage
        elseif type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
            Shuffled = Garbage
        end
    end
end

local Clicker do
    if Playground == false then
        Clicker = getupvalue(Selected, 3)
    else
        Clicker = getupvalue(Selected, 5)
    end
end

local GetClock = function()
    local OldClock = getupvalue(Selected, 3)
    local NewClock = OldClock + 1
    setupvalue(Selected, 3, NewClock)
    return NewClock
end

local GetKeyFromKeyTable = function()
    local Keys = getupvalue(Selected, 4)
    if Playground == true then
        return "Shotta_"
    elseif type(Keys[1]) == "string" then
        return Keys[1]
    end
    return "Shotta"
end

local RemoveKeyFromKeyTable = function()
    local Keys = getupvalue(Selected, 4)
    if type(Keys) == "table" then
        table.remove(Keys, 1)
        setupvalue(Selected, 4, Keys)
    end
end

local GetRandomizedTable = function(TorsoPosition, ShootPosition)
    local UnrandomizedArgs = {
        X1 = TorsoPosition.X,
        Y1 = TorsoPosition.Y,
        Z1 = TorsoPosition.Z,
        X2 = ShootPosition.X,
        Y2 = ShootPosition.Y,
        Z2 = ShootPosition.Z
    }
    local RandomizedArgs = {
        UnrandomizedArgs[Shuffled["1"]],
        UnrandomizedArgs[Shuffled["2"]],
        UnrandomizedArgs[Shuffled["3"]],
        UnrandomizedArgs[Shuffled["4"]],
        UnrandomizedArgs[Shuffled["5"]],
        UnrandomizedArgs[Shuffled["6"]],
    }
    return RandomizedArgs
end

local GetGoal = function()
    local Distance, Goal = 9e9
    for _, Obj in next, Goals do
        local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
        if Distance > Magnitude then
            Distance = Magnitude
            Goal = Obj
        end
    end
    return Goal
end

local GetDistance = function()
    local Goal = GetGoal()
    return (Player.Character.Torso.Position - Goal.Position).Magnitude
end

local GetDirection = function(Position)
    return (Position - Player.Character.Torso.Position).Unit
end

local GetBasketball = function()
    return Player.Character:FindFirstChildOfClass("Folder")
end

-- ✅ CUSTOM: In-footing check for 30-60 studs range
local InFootingCheck = function()
    local Distance = GetDistance()
    local Basketball = GetBasketball()

    if not Basketball then
        IsInFooting = false
        return
    end

    if not Player.Character or Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Running then
        IsInFooting = false
        return
    end

    IsInFooting = Distance > 30 and Distance < 60
end

-- ✅ CUSTOM: Arc system based on short distance range
local GetArc = function()
    local Distance = GetDistance()
    local Arc

    if Distance > 30 and Distance <= 35 then
        Arc = 160
    elseif Distance > 35 and Distance <= 40 then
        Arc = 155
    elseif Distance > 40 and Distance <= 45 then
        Arc = 150
    elseif Distance > 45 and Distance <= 50 then
        Arc = 145
    elseif Distance > 50 and Distance <= 55 then
        Arc = 140
    elseif Distance > 55 and Distance <= 60 then
        Arc = 135
    end

    if Playground == true and Arc then
        Arc = Arc - 3
    end

    return Arc
end

local Shoot = function()
    local Goal = GetGoal()
    local Arc = GetArc()
    local Hit = (Goal.Position + Vector3.new(0, Arc, 0) + Player.Character.Humanoid.MoveDirection)
    local Direction = GetDirection(Hit)
    local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Direction)
    local Basketball = GetBasketball()
    local Key = GetKeyFromKeyTable()

    if Playground == true then
        local Clock = GetClock()
        Key = Key .. Clock
    end

    Clicker:FireServer(Basketball, Basketball.PowerValue.Value, RandomizedArgs, Key)
    RemoveKeyFromKeyTable()
end

_G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
    if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
        Shoot()
    end
end)

_G.Stepped = RS.Stepped:Connect(function()
    InFootingCheck()
end)
